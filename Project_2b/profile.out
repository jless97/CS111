Total: 544 samples
     416  76.5%  76.5%      544 100.0% listOperations
     100  18.4%  94.9%      100  18.4% __strcmp_sse42
      18   3.3%  98.2%       85  15.6% SortedList_insert
       8   1.5%  99.6%       43   7.9% SortedList_lookup
       2   0.4% 100.0%        2   0.4% _init
       0   0.0% 100.0%      544 100.0% __clone
       0   0.0% 100.0%      544 100.0% start_thread
ROUTINE ====================== listOperations in /u/cs/ugrad/less/Desktop/cs111/Project_2b/Temp_Files/lab2_list.c
   416    544 Total samples (flat / cumulative)
     .      .  274:         }
     .      .  275:     }
     .      .  276: }
     .      .  277: 
     .      .  278: void*
---
     .      .  279: listOperations(void *threadID) {
     .      .  280:     SortedListElement_t *element;
     .      .  281:     int i, clock_status, delete_status;
     .      .  282:     struct timespec before_mutex, after_mutex, before_lock, after_lock;
     .      .  283:     long temp_time = 0;
     .      .  284:     
     .      .  285:     // Insert elements into the list
     .      .  286:     for (i = *(int *)threadID; i < nelements; i += nthreads) {
     .      .  287:         if (sync_flag == 1) {
     .      .  288:             // Mutex
     .      .  289:             if (synchronization == 'm') {
     .      .  290:                 
     .      .  291:                 // Note the high resolution time before acquiring mutex lock
     .      .  292:                 clock_status = clock_gettime(CLOCK_MONOTONIC, &before_mutex);
     .      .  293:                 if (clock_status == -1) {
     .      .  294:                     fprintf(stderr, "Error with initial clock time.\n");
     .      .  295:                     exit(EXIT_FAILURE);
     .      .  296:                 }
     .      .  297:                 pthread_mutex_lock(&locks[this_list[i]]);
     .      .  298:                 // Note the high resolution time after releasing mutex lock
     .      .  299:                 clock_status = clock_gettime(CLOCK_MONOTONIC, &after_mutex);
     .      .  300:                 if (clock_status == -1) {
     .      .  301:                     fprintf(stderr, "Error with final clock time.\n");
     .      .  302:                     exit(EXIT_FAILURE);
     .      .  303:                 }
     .      .  304:                 // Lock-acquisition (mutex-insert) time
     .      .  305:                 temp_time = ((after_mutex.tv_sec - before_mutex.tv_sec) * SEC_TO_NSEC) + (after_mutex.tv_nsec - before_mutex.tv_nsec);
     .      .  306:                 lock_acquisition_time += temp_time;
     .      .  307:                 
     .      .  308:                 SortedList_insert(&sublists[this_list[i]], &elements[i]);
     .      .  309:                 pthread_mutex_unlock(&locks[this_list[i]]);
     .      .  310:             }
     .      .  311:             // Spin Lock
     .      .  312:             if (synchronization == 's') {
     .      .  313:                 // Note the high resolution time before acquiring mutex lock
     .      .  314:                 clock_status = clock_gettime(CLOCK_MONOTONIC, &before_lock);
     .      .  315:                 if (clock_status == -1) {
     .      .  316:                     fprintf(stderr, "Error with initial clock time.\n");
     .      .  317:                     exit(EXIT_FAILURE);
     .      .  318:                 }
   348    348  319:                 while (__sync_lock_test_and_set(&test_and_set_locks[this_list[i]], 1));
     .      .  320:                 // Note the high resolution time after releasing mutex lock
     .      .  321:                 clock_status = clock_gettime(CLOCK_MONOTONIC, &after_lock);
     .      .  322:                 if (clock_status == -1) {
     .      .  323:                     fprintf(stderr, "Error with final clock time.\n");
     .      .  324:                     exit(EXIT_FAILURE);
     .      .  325:                 }
     .      .  326:                 // Lock-acquisition (mutex-insert) time
     .      .  327:                 temp_time = ((after_lock.tv_sec - before_lock.tv_sec) * SEC_TO_NSEC) + (after_lock.tv_nsec - before_lock.tv_nsec);
     .      .  328:                 lock_acquisition_time += temp_time;
     .      .  329:                 
     .      .  330:                 
     .     85  331:                 SortedList_insert(&sublists[this_list[i]], &elements[i]);
     .      .  332:                 __sync_lock_release(&test_and_set_locks[this_list[i]]);
     .      .  333:             }
     .      .  334:         }
     .      .  335:         else {
     .      .  336:             SortedList_insert(&sublists[this_list[i]], &elements[i]);
     .      .  337:         }
     .      .  338:     }
     .      .  339:     
     .      .  340:     // Gets length of lists
     .      .  341:     if (sync_flag == 1) {
     .      .  342:         if (synchronization == 'm') {
     .      .  343:             for (i = 0; i < nlists; i++) {
     .      .  344:                 // Note the high resolution time before acquiring mutex lock
     .      .  345:                 clock_status = clock_gettime(CLOCK_MONOTONIC, &before_mutex);
     .      .  346:                 if (clock_status == -1) {
     .      .  347:                     fprintf(stderr, "Error with initial clock time.\n");
     .      .  348:                     exit(EXIT_FAILURE);
     .      .  349:                 }
     .      .  350:                 pthread_mutex_lock(&locks[i]);
     .      .  351:                 // Note the high resolution time after releasing mutex lock
     .      .  352:                 clock_status = clock_gettime(CLOCK_MONOTONIC, &after_mutex);
     .      .  353:                 if (clock_status == -1) {
     .      .  354:                     fprintf(stderr, "Error with final clock time.\n");
     .      .  355:                     exit(EXIT_FAILURE);
     .      .  356:                 }
     .      .  357:                 // Lock-acquisition (mutex-insert) time
     .      .  358:                 temp_time = ((after_mutex.tv_sec - before_mutex.tv_sec) * SEC_TO_NSEC) + (after_mutex.tv_nsec - before_mutex.tv_nsec);
     .      .  359:                 lock_acquisition_time += temp_time;
     .      .  360:                 
     .      .  361:                 list_size += SortedList_length(&sublists[i]);
     .      .  362:                 pthread_mutex_unlock(&locks[i]);
     .      .  363:             }
     .      .  364:         }
     .      .  365:         else if (synchronization == 's') {
     .      .  366:             for (i = 0; i < nlists; i++) {
     .      .  367:                 // Note the high resolution time before acquiring mutex lock
     .      .  368:                 clock_status = clock_gettime(CLOCK_MONOTONIC, &before_lock);
     .      .  369:                 if (clock_status == -1) {
     .      .  370:                     fprintf(stderr, "Error with initial clock time.\n");
     .      .  371:                     exit(EXIT_FAILURE);
     .      .  372:                 }
     1      1  373:                 while (__sync_lock_test_and_set(&test_and_set_locks[i], 1));
     .      .  374:                 // Note the high resolution time after releasing mutex lock
     .      .  375:                 clock_status = clock_gettime(CLOCK_MONOTONIC, &after_lock);
     .      .  376:                 if (clock_status == -1) {
     .      .  377:                     fprintf(stderr, "Error with final clock time.\n");
     .      .  378:                     exit(EXIT_FAILURE);
     .      .  379:                 }
     .      .  380:                 // Lock-acquisition (mutex-insert) time
     .      .  381:                 temp_time = ((after_lock.tv_sec - before_lock.tv_sec) * SEC_TO_NSEC) + (after_lock.tv_nsec - before_lock.tv_nsec);
     .      .  382:                 lock_acquisition_time += temp_time;
     .      .  383:                 
     .      .  384:                 list_size += SortedList_length(&sublists[i]);
     .      .  385:                 __sync_lock_release(&test_and_set_locks[i]);
     .      .  386:             }
     .      .  387:         }
     .      .  388:         else {
     .      .  389:             // Set the length of the list
     .      .  390:             for (i = 0; i < nlists; i++) {
     .      .  391:                 list_size += SortedList_length(&sublists[i]);
     .      .  392:             }
     .      .  393:         }
     .      .  394:     }
     .      .  395:     
     .      .  396:     // Lookup and delete elements from the list
     .      .  397:     for (i = *(int *)threadID; i < nelements; i += nthreads) {
     .      .  398:         if (sync_flag == 1) {
     .      .  399:             // Mutex
     .      .  400:             if (synchronization == 'm') {
     .      .  401:                 // Note the high resolution time before acquiring mutex lock
     .      .  402:                 clock_status = clock_gettime(CLOCK_MONOTONIC, &before_mutex);
     .      .  403:                 if (clock_status == -1) {
     .      .  404:                     fprintf(stderr, "Error with initial clock time.\n");
     .      .  405:                     exit(EXIT_FAILURE);
     .      .  406:                 }
     .      .  407:                 pthread_mutex_lock(&locks[this_list[i]]);
     .      .  408:                 // Note the high resolution time after releasing mutex lock
     .      .  409:                 clock_status = clock_gettime(CLOCK_MONOTONIC, &after_mutex);
     .      .  410:                 if (clock_status == -1) {
     .      .  411:                     fprintf(stderr, "Error with final clock time.\n");
     .      .  412:                     exit(EXIT_FAILURE);
     .      .  413:                 }
     .      .  414:                 // Lock-acquisition (mutex-insert) time
     .      .  415:                 temp_time = ((after_mutex.tv_sec - before_mutex.tv_sec) * SEC_TO_NSEC) + (after_mutex.tv_nsec - before_mutex.tv_nsec);
     .      .  416:                 lock_acquisition_time += temp_time;
     .      .  417:                 
     .      .  418:                 element = SortedList_lookup(&sublists[this_list[i]], elements[i].key);
     .      .  419:                 if (element == NULL) {
     .      .  420:                     fprintf(stderr, "Error: can't find key that was inserted.\n");
     .      .  421:                     exit(EXIT_OTHER_FAILURE);
     .      .  422:                 }
     .      .  423:                 delete_status = SortedList_delete(element);
     .      .  424:                 if (delete_status == 1) {
     .      .  425:                     fprintf(stderr, "Error: delete failed.\n");
     .      .  426:                     exit(EXIT_OTHER_FAILURE);
     .      .  427:                 }
     .      .  428:                 pthread_mutex_unlock(&locks[this_list[i]]);
     .      .  429:             }
     .      .  430:             // Spin Lock
     .      .  431:             if (synchronization == 's') {
     .      .  432:                 // Note the high resolution time before acquiring mutex lock
     .      .  433:                 clock_status = clock_gettime(CLOCK_MONOTONIC, &before_lock);
     .      .  434:                 if (clock_status == -1) {
     .      .  435:                     fprintf(stderr, "Error with initial clock time.\n");
     .      .  436:                     exit(EXIT_FAILURE);
     .      .  437:                 }
    67     67  438:                 while (__sync_lock_test_and_set(&test_and_set_locks[this_list[i]], 1));
     .      .  439:                 // Note the high resolution time after releasing mutex lock
     .      .  440:                 clock_status = clock_gettime(CLOCK_MONOTONIC, &after_lock);
     .      .  441:                 if (clock_status == -1) {
     .      .  442:                     fprintf(stderr, "Error with final clock time.\n");
     .      .  443:                     exit(EXIT_FAILURE);
     .      .  444:                 }
     .      .  445:                 // Lock-acquisition (mutex-insert) time
     .      .  446:                 temp_time = ((after_lock.tv_sec - before_lock.tv_sec) * SEC_TO_NSEC) + (after_lock.tv_nsec - before_lock.tv_nsec);
     .      .  447:                 lock_acquisition_time += temp_time;
     .      .  448:                 
     .      .  449:                 
     .     43  450:                 element = SortedList_lookup(&sublists[this_list[i]], elements[i].key);
     .      .  451:                 if (element == NULL) {
     .      .  452:                     fprintf(stderr, "Error: can't find key that was inserted.\n");
     .      .  453:                     exit(EXIT_OTHER_FAILURE);
     .      .  454:                 }
     .      .  455:                 delete_status = SortedList_delete(element);
     .      .  456:                 if (delete_status == 1) {
     .      .  457:                     fprintf(stderr, "Error: delete failed.\n");
     .      .  458:                     exit(EXIT_OTHER_FAILURE);
     .      .  459:                 }
     .      .  460:                 __sync_lock_release(&test_and_set_locks[this_list[i]]);
     .      .  461:             }
     .      .  462:         }
     .      .  463:         else {
     .      .  464:             element = SortedList_lookup(&sublists[this_list[i]], elements[i].key);
     .      .  465:             if (element == NULL) {
     .      .  466:                 fprintf(stderr, "Error: can't find key that was inserted.\n");
     .      .  467:                 exit(EXIT_OTHER_FAILURE);
     .      .  468:             }
     .      .  469:             delete_status = SortedList_delete(element);
     .      .  470:             if (delete_status == 1) {
     .      .  471:                 fprintf(stderr, "Error: delete failed.\n");
     .      .  472:                 exit(EXIT_OTHER_FAILURE);
     .      .  473:             }
     .      .  474:         }
     .      .  475:     }
     .      .  476:     return NULL;
     .      .  477: }
---
     .      .  478: 
     .      .  479: void
     .      .  480: freeMemory(void) {
     .      .  481:     free(sublists);
     .      .  482:     free(elements);
ROUTINE ====================== listOperations in /u/cs/ugrad/less/Desktop/cs111/Project_2b/Temp_Files/lab2_list.c
   416    544 Total samples (flat / cumulative)
     .      .  274:         }
     .      .  275:     }
     .      .  276: }
     .      .  277: 
     .      .  278: void*
---
     .      .  279: listOperations(void *threadID) {
     .      .  280:     SortedListElement_t *element;
     .      .  281:     int i, clock_status, delete_status;
     .      .  282:     struct timespec before_mutex, after_mutex, before_lock, after_lock;
     .      .  283:     long temp_time = 0;
     .      .  284:     
     .      .  285:     // Insert elements into the list
     .      .  286:     for (i = *(int *)threadID; i < nelements; i += nthreads) {
     .      .  287:         if (sync_flag == 1) {
     .      .  288:             // Mutex
     .      .  289:             if (synchronization == 'm') {
     .      .  290:                 
     .      .  291:                 // Note the high resolution time before acquiring mutex lock
     .      .  292:                 clock_status = clock_gettime(CLOCK_MONOTONIC, &before_mutex);
     .      .  293:                 if (clock_status == -1) {
     .      .  294:                     fprintf(stderr, "Error with initial clock time.\n");
     .      .  295:                     exit(EXIT_FAILURE);
     .      .  296:                 }
     .      .  297:                 pthread_mutex_lock(&locks[this_list[i]]);
     .      .  298:                 // Note the high resolution time after releasing mutex lock
     .      .  299:                 clock_status = clock_gettime(CLOCK_MONOTONIC, &after_mutex);
     .      .  300:                 if (clock_status == -1) {
     .      .  301:                     fprintf(stderr, "Error with final clock time.\n");
     .      .  302:                     exit(EXIT_FAILURE);
     .      .  303:                 }
     .      .  304:                 // Lock-acquisition (mutex-insert) time
     .      .  305:                 temp_time = ((after_mutex.tv_sec - before_mutex.tv_sec) * SEC_TO_NSEC) + (after_mutex.tv_nsec - before_mutex.tv_nsec);
     .      .  306:                 lock_acquisition_time += temp_time;
     .      .  307:                 
     .      .  308:                 SortedList_insert(&sublists[this_list[i]], &elements[i]);
     .      .  309:                 pthread_mutex_unlock(&locks[this_list[i]]);
     .      .  310:             }
     .      .  311:             // Spin Lock
     .      .  312:             if (synchronization == 's') {
     .      .  313:                 // Note the high resolution time before acquiring mutex lock
     .      .  314:                 clock_status = clock_gettime(CLOCK_MONOTONIC, &before_lock);
     .      .  315:                 if (clock_status == -1) {
     .      .  316:                     fprintf(stderr, "Error with initial clock time.\n");
     .      .  317:                     exit(EXIT_FAILURE);
     .      .  318:                 }
   348    348  319:                 while (__sync_lock_test_and_set(&test_and_set_locks[this_list[i]], 1));
     .      .  320:                 // Note the high resolution time after releasing mutex lock
     .      .  321:                 clock_status = clock_gettime(CLOCK_MONOTONIC, &after_lock);
     .      .  322:                 if (clock_status == -1) {
     .      .  323:                     fprintf(stderr, "Error with final clock time.\n");
     .      .  324:                     exit(EXIT_FAILURE);
     .      .  325:                 }
     .      .  326:                 // Lock-acquisition (mutex-insert) time
     .      .  327:                 temp_time = ((after_lock.tv_sec - before_lock.tv_sec) * SEC_TO_NSEC) + (after_lock.tv_nsec - before_lock.tv_nsec);
     .      .  328:                 lock_acquisition_time += temp_time;
     .      .  329:                 
     .      .  330:                 
     .     85  331:                 SortedList_insert(&sublists[this_list[i]], &elements[i]);
     .      .  332:                 __sync_lock_release(&test_and_set_locks[this_list[i]]);
     .      .  333:             }
     .      .  334:         }
     .      .  335:         else {
     .      .  336:             SortedList_insert(&sublists[this_list[i]], &elements[i]);
     .      .  337:         }
     .      .  338:     }
     .      .  339:     
     .      .  340:     // Gets length of lists
     .      .  341:     if (sync_flag == 1) {
     .      .  342:         if (synchronization == 'm') {
     .      .  343:             for (i = 0; i < nlists; i++) {
     .      .  344:                 // Note the high resolution time before acquiring mutex lock
     .      .  345:                 clock_status = clock_gettime(CLOCK_MONOTONIC, &before_mutex);
     .      .  346:                 if (clock_status == -1) {
     .      .  347:                     fprintf(stderr, "Error with initial clock time.\n");
     .      .  348:                     exit(EXIT_FAILURE);
     .      .  349:                 }
     .      .  350:                 pthread_mutex_lock(&locks[i]);
     .      .  351:                 // Note the high resolution time after releasing mutex lock
     .      .  352:                 clock_status = clock_gettime(CLOCK_MONOTONIC, &after_mutex);
     .      .  353:                 if (clock_status == -1) {
     .      .  354:                     fprintf(stderr, "Error with final clock time.\n");
     .      .  355:                     exit(EXIT_FAILURE);
     .      .  356:                 }
     .      .  357:                 // Lock-acquisition (mutex-insert) time
     .      .  358:                 temp_time = ((after_mutex.tv_sec - before_mutex.tv_sec) * SEC_TO_NSEC) + (after_mutex.tv_nsec - before_mutex.tv_nsec);
     .      .  359:                 lock_acquisition_time += temp_time;
     .      .  360:                 
     .      .  361:                 list_size += SortedList_length(&sublists[i]);
     .      .  362:                 pthread_mutex_unlock(&locks[i]);
     .      .  363:             }
     .      .  364:         }
     .      .  365:         else if (synchronization == 's') {
     .      .  366:             for (i = 0; i < nlists; i++) {
     .      .  367:                 // Note the high resolution time before acquiring mutex lock
     .      .  368:                 clock_status = clock_gettime(CLOCK_MONOTONIC, &before_lock);
     .      .  369:                 if (clock_status == -1) {
     .      .  370:                     fprintf(stderr, "Error with initial clock time.\n");
     .      .  371:                     exit(EXIT_FAILURE);
     .      .  372:                 }
     1      1  373:                 while (__sync_lock_test_and_set(&test_and_set_locks[i], 1));
     .      .  374:                 // Note the high resolution time after releasing mutex lock
     .      .  375:                 clock_status = clock_gettime(CLOCK_MONOTONIC, &after_lock);
     .      .  376:                 if (clock_status == -1) {
     .      .  377:                     fprintf(stderr, "Error with final clock time.\n");
     .      .  378:                     exit(EXIT_FAILURE);
     .      .  379:                 }
     .      .  380:                 // Lock-acquisition (mutex-insert) time
     .      .  381:                 temp_time = ((after_lock.tv_sec - before_lock.tv_sec) * SEC_TO_NSEC) + (after_lock.tv_nsec - before_lock.tv_nsec);
     .      .  382:                 lock_acquisition_time += temp_time;
     .      .  383:                 
     .      .  384:                 list_size += SortedList_length(&sublists[i]);
     .      .  385:                 __sync_lock_release(&test_and_set_locks[i]);
     .      .  386:             }
     .      .  387:         }
     .      .  388:         else {
     .      .  389:             // Set the length of the list
     .      .  390:             for (i = 0; i < nlists; i++) {
     .      .  391:                 list_size += SortedList_length(&sublists[i]);
     .      .  392:             }
     .      .  393:         }
     .      .  394:     }
     .      .  395:     
     .      .  396:     // Lookup and delete elements from the list
     .      .  397:     for (i = *(int *)threadID; i < nelements; i += nthreads) {
     .      .  398:         if (sync_flag == 1) {
     .      .  399:             // Mutex
     .      .  400:             if (synchronization == 'm') {
     .      .  401:                 // Note the high resolution time before acquiring mutex lock
     .      .  402:                 clock_status = clock_gettime(CLOCK_MONOTONIC, &before_mutex);
     .      .  403:                 if (clock_status == -1) {
     .      .  404:                     fprintf(stderr, "Error with initial clock time.\n");
     .      .  405:                     exit(EXIT_FAILURE);
     .      .  406:                 }
     .      .  407:                 pthread_mutex_lock(&locks[this_list[i]]);
     .      .  408:                 // Note the high resolution time after releasing mutex lock
     .      .  409:                 clock_status = clock_gettime(CLOCK_MONOTONIC, &after_mutex);
     .      .  410:                 if (clock_status == -1) {
     .      .  411:                     fprintf(stderr, "Error with final clock time.\n");
     .      .  412:                     exit(EXIT_FAILURE);
     .      .  413:                 }
     .      .  414:                 // Lock-acquisition (mutex-insert) time
     .      .  415:                 temp_time = ((after_mutex.tv_sec - before_mutex.tv_sec) * SEC_TO_NSEC) + (after_mutex.tv_nsec - before_mutex.tv_nsec);
     .      .  416:                 lock_acquisition_time += temp_time;
     .      .  417:                 
     .      .  418:                 element = SortedList_lookup(&sublists[this_list[i]], elements[i].key);
     .      .  419:                 if (element == NULL) {
     .      .  420:                     fprintf(stderr, "Error: can't find key that was inserted.\n");
     .      .  421:                     exit(EXIT_OTHER_FAILURE);
     .      .  422:                 }
     .      .  423:                 delete_status = SortedList_delete(element);
     .      .  424:                 if (delete_status == 1) {
     .      .  425:                     fprintf(stderr, "Error: delete failed.\n");
     .      .  426:                     exit(EXIT_OTHER_FAILURE);
     .      .  427:                 }
     .      .  428:                 pthread_mutex_unlock(&locks[this_list[i]]);
     .      .  429:             }
     .      .  430:             // Spin Lock
     .      .  431:             if (synchronization == 's') {
     .      .  432:                 // Note the high resolution time before acquiring mutex lock
     .      .  433:                 clock_status = clock_gettime(CLOCK_MONOTONIC, &before_lock);
     .      .  434:                 if (clock_status == -1) {
     .      .  435:                     fprintf(stderr, "Error with initial clock time.\n");
     .      .  436:                     exit(EXIT_FAILURE);
     .      .  437:                 }
    67     67  438:                 while (__sync_lock_test_and_set(&test_and_set_locks[this_list[i]], 1));
     .      .  439:                 // Note the high resolution time after releasing mutex lock
     .      .  440:                 clock_status = clock_gettime(CLOCK_MONOTONIC, &after_lock);
     .      .  441:                 if (clock_status == -1) {
     .      .  442:                     fprintf(stderr, "Error with final clock time.\n");
     .      .  443:                     exit(EXIT_FAILURE);
     .      .  444:                 }
     .      .  445:                 // Lock-acquisition (mutex-insert) time
     .      .  446:                 temp_time = ((after_lock.tv_sec - before_lock.tv_sec) * SEC_TO_NSEC) + (after_lock.tv_nsec - before_lock.tv_nsec);
     .      .  447:                 lock_acquisition_time += temp_time;
     .      .  448:                 
     .      .  449:                 
     .     43  450:                 element = SortedList_lookup(&sublists[this_list[i]], elements[i].key);
     .      .  451:                 if (element == NULL) {
     .      .  452:                     fprintf(stderr, "Error: can't find key that was inserted.\n");
     .      .  453:                     exit(EXIT_OTHER_FAILURE);
     .      .  454:                 }
     .      .  455:                 delete_status = SortedList_delete(element);
     .      .  456:                 if (delete_status == 1) {
     .      .  457:                     fprintf(stderr, "Error: delete failed.\n");
     .      .  458:                     exit(EXIT_OTHER_FAILURE);
     .      .  459:                 }
     .      .  460:                 __sync_lock_release(&test_and_set_locks[this_list[i]]);
     .      .  461:             }
     .      .  462:         }
     .      .  463:         else {
     .      .  464:             element = SortedList_lookup(&sublists[this_list[i]], elements[i].key);
     .      .  465:             if (element == NULL) {
     .      .  466:                 fprintf(stderr, "Error: can't find key that was inserted.\n");
     .      .  467:                 exit(EXIT_OTHER_FAILURE);
     .      .  468:             }
     .      .  469:             delete_status = SortedList_delete(element);
     .      .  470:             if (delete_status == 1) {
     .      .  471:                 fprintf(stderr, "Error: delete failed.\n");
     .      .  472:                 exit(EXIT_OTHER_FAILURE);
     .      .  473:             }
     .      .  474:         }
     .      .  475:     }
     .      .  476:     return NULL;
     .      .  477: }
---
     .      .  478: 
     .      .  479: void
     .      .  480: freeMemory(void) {
     .      .  481:     free(sublists);
     .      .  482:     free(elements);
